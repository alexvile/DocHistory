// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COMMITER
  VIEWER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role
  email     String   @unique
  password  String
  firstName String
  lastName  String
  norms     Norm[]   @relation("UserNorms")
  // todo - if we remove customer - we leave his norms and changes
  changes   Change[] @relation("UserChanges")
}

model Norm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productName String   @unique
  // todo refactor fields
  norm1       Int
  norm2       Int
  creator     User     @relation(references: [id], fields: [creatorId], "UserNorms")
  creatorId   String   @db.ObjectId
  changes     Change[] @relation("NormChanges")
}

model Change {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  objectId  String   @db.ObjectId
  createdAt DateTime @default(now())
  changes   Json
  user      User     @relation("UserChanges", fields: [userId], references: [id])
  norm      Norm     @relation("NormChanges", fields: [objectId], references: [id])
}

// JSON з інформацією про зміни: { field: "value_before", newValue: "value_after" }